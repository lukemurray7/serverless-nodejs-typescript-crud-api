service:
  name: mysense-tech-test

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  region: eu-west-1
  name: aws
  runtime: nodejs10.x
  environment:
    SECRET_NAME: ${env:SECRET_NAME, file(env.yml):SECRET_NAME}

functions:
  auth:
    handler: handlers/auth.handler
    iamRoleStatementsName: ${self:service}-auth
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'ssm:GetParameter'
        Resource:
          Fn::Join:
            - ''
            - - 'arn:aws:ssm:eu-west-1:'
              - Ref: AWS::AccountId
              - ':parameter/${env:SECRET_NAME, file(env.yml):SECRET_NAME}'

  create:
    handler: handlers/create.handler
    events:
      - http:
          method: post
          path: create
          authorizer:
            name: auth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
    iamRoleStatementsName: ${self:service}-create
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:CreateItem
        Resource:
          Fn::Join:
            - ':'
            - - 'arn:aws:dynamodb:eu-west-1'
              - Ref: AWS::AccountId
              - 'table/sensor-data-table'
    
  
  read:
    handler: handlers/read.handler
    events:
      - http:
          method: get
          path: read
          authorizer:
            name: auth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
    iamRoleStatementsName: ${self:service}-read
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem 
        Resource:
          Fn::Join:
            - ':'
            - - 'arn:aws:dynamodb:eu-west-1'
              - Ref: AWS::AccountId
              - 'table/sensor-data-table'

  
  update:
    handler: handlers/update.handler
    events:
      - http:
          method: post
          path: update
          authorizer:
            name: auth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
    iamRoleStatementsName: ${self:service}-update
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource:
          Fn::Join:
            - ':'
            - - 'arn:aws:dynamodb:eu-west-1'
              - Ref: AWS::AccountId
              - 'table/sensor-data-table'
  
  delete:
    handler: handlers/delete.handler
    events:
      - http:
          method: post
          path: delete
          authorizer:
            name: auth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
    iamRoleStatementsName: ${self:service}-delete
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
        Resource:
          Fn::Join:
            - ':'
            - - 'arn:aws:dynamodb:eu-west-1'
              - Ref: AWS::AccountId
              - 'table/sensor-data-table'


resources:
 Resources:
  SensorDataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: sensor-data-table
        AttributeDefinitions:
          - {AttributeName: type, AttributeType: S}
        KeySchema:
          - {AttributeName: type, KeyType: HASH}
        BillingMode: PAY_PER_REQUEST